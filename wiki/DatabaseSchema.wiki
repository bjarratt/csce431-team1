#summary Preliminary Database Schema

= Introduction =

This preliminary database schema should allow for implementation of all use cases currently specified.


= Tables =
 * All tables implicitly have an ID column not mentioned in this document. This column will have the specification: INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT, and most likely will be named ModelNameID, or simply ID.

 * Relationships between tables are represented in this document by the terms `has_many`, `has_one`, and `belongs_to`, which are used similarly to their meaning in Ruby on Rails.
 * TODO: Add documentation of the meaning (and actual implementation) of these relationship verbs.
 * TODO: Remove all use of `belongs_to` where it reflects an already existing `has_one`.

== Dealerships ==
has_many Vehicles
has_many Employees (through Roles)
has_many VehicleTrades
 * Title (STRING NOT NULL)
 * Address (STRING NOT NULL)
 * Created (DATETIME NOT NULL)

== Employees ==
has_many Roles
 * FirstName (STRING NOT NULL)
 * LastName (STRING NOT NULL)
 * Added (DATETIME NOT NULL)

== FinalSales ==
belongs_to Vehicle
belongs_to PendingSale
belongs_to Employee (Manager)
 * Finalized (DATETIME NOT NULL)

== JobTitles ==
JobTitles (assigned to Employees through Roles) determine what access a user has to the AutoTune system (for example, only a Manager--an Employee marked with Role "Manager"--can alter inventory directly).
 * Label (STRING NOT NULL)


== PendingSales ==
belongs_to Vehicle
belongs_to Employee
 * Amount (FLOAT NOT NULL)
 * Negotiated (DATETIME NOT NULL)
 * Expires (DATETIME)
  * If `Expires` is NULL, the PendingSale does not expire

== Roles ==
Roles match Employees to JobTitles; each Employee may have multiple, one, or no Roles (no Roles implies the Employee has been terminated).
belongs_to Employee
belongs_to JobTitle
belongs_to Dealership (Location)
 * StartDate (DATETIME NOT NULL)
 * EndDate (DATETIME)
  * If EndDate is NULL, the Employee still has this Role.

== Vehicles ==
belongs_to Dealership
belongs_to VehicleType
has_one PendingSale (NULLABLE)
has_one FinalSale (NULLABLE)

 * IdentNumber(STRING NOT NULL)
  * Note that though modern vehicles use a widely accepted format for the Vehicle Identification Number, older vehicles had VINs with formats that varied by manufacturer. Treating this value as an arbitrary (character) string allows us to include such vehicles.
  * This value reflects the VIN on cars/motorcycles/RVs, or the HIN on boats.
 * Year (YEAR NOT NULL)
 * Make (STRING NOT NULL)
  * May be normalized by a table of Makes
 * Model (STRING NOT NULL)
  * May be normalized by a table of Models
 * Added (DATETIME NOT NULL)

== VehicleTrades ==
 * belongs_to Dealership as following:
  * Initiator (INTEGER NOT NULL)
  * Target (INTEGER NOT NULL)
 * Initiated (DATETIME NOT NULL)
 * Accepted (DATETIME)
 * Rejected (DATETIME)

== VehicleTradeItems ==
belongs_to VehicleTrade
belongs_to Vehicle

== VehicleTypes ==
 * Label (STRING NOT NULL)
  * Will be "Car," "Truck," "RV," "Motorcycle," "Boat," etc
 * IdentTitle (STRING NOT NULL)
  * What is the identification number for this VehicleType called? (VIN, Hull ID, etc)